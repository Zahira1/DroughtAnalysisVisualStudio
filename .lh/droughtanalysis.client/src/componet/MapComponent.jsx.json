{
    "sourceFile": "droughtanalysis.client/src/componet/MapComponent.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1726175170624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726175187689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n import { GetWebMapAsJsonString } from './utils/MapAsJson';\r\n import { submitJob } from '@arcgis/core/rest/geoprocessor';\r\n import Button from 'react-bootstrap/Button';\r\n import ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n-import Expand from \"@arcgis/core/widgets/Expand\";\r\n+\r\n function MapComponent({ selectedDate, selectedCounty, queryDate, onForestToggle, setSelectedCountyDraw, setSelectedCounty }) {\r\n     const counties = useRef(null);\r\n     const highlightSelect = useRef(null);\r\n     const droughtLayer = useRef(null);\r\n"
                },
                {
                    "date": 1726175358155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,12 @@\n                 expanded: true,\r\n                 group: \"top-left\",\r\n                 mode: \"floating\"\r\n               });\r\n+              view.ui.add([\r\n+                questionbtn,\r\n+                toolsExpand\r\n+              ], \"top-left\");\r\n             // Add forest layer\r\n             const forest = new MapImageLayer({\r\n                 url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n                 title: 'Forest',\r\n"
                },
                {
                    "date": 1726175541082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,8 @@\n                 group: \"top-left\",\r\n                 mode: \"floating\"\r\n               });\r\n               view.ui.add([\r\n-                questionbtn,\r\n                 toolsExpand\r\n               ], \"top-left\");\r\n             // Add forest layer\r\n             const forest = new MapImageLayer({\r\n"
                },
                {
                    "date": 1726175572045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+import { useEffect, useRef, useState } from 'react';\r\n+import MapView from '@arcgis/core/views/MapView';\r\n+import Map from '@arcgis/core/Map';\r\n+import MapImageLayer from '@arcgis/core/layers/MapImageLayer';\r\n+import FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\n+import BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\n+import Expand from '@arcgis/core/widgets/Expand';\r\n+import Draw from '@arcgis/core/views/draw/Draw';\r\n+import { DrawLine } from './utils/Draw';\r\n+import PropTypes from 'prop-types';\r\n+import { GetWebMapAsJsonString } from './utils/MapAsJson';\r\n+import { submitJob } from '@arcgis/core/rest/geoprocessor';\r\n+import Button from 'react-bootstrap/Button';\r\n+import ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n+\r\n+function MapComponent({ selectedDate, selectedCounty, queryDate, onForestToggle, setSelectedCountyDraw, setSelectedCounty }) {\r\n+    const counties = useRef(null);\r\n+    const highlightSelect = useRef(null);\r\n+    const droughtLayer = useRef(null);\r\n+    const view = useRef(null);\r\n+    const mapDiv = useRef(null);\r\n+\r\n+    const [isExpanded, setIsExpanded] = useState(false);\r\n+    const toggleExpand = () => {\r\n+        setIsExpanded(!isExpanded);\r\n+    };\r\n+\r\n+    useEffect(() => {\r\n+        const initializeMap = async () => {\r\n+            const webmap = new Map({\r\n+                basemap: 'streets'\r\n+            });\r\n+\r\n+            view.current = new MapView({\r\n+                container: mapDiv.current,\r\n+                map: webmap,\r\n+                center: [-117.1490, 32.7353],\r\n+                scale: 10000000\r\n+            });\r\n+            const toolsExpand = new Expand({\r\n+                view,\r\n+                expandIconClass: \"esri-icon-filter\",\r\n+                content: document.getElementById(\"infoDiv\"),\r\n+                expanded: true,\r\n+                group: \"top-left\",\r\n+                mode: \"floating\"\r\n+              });\r\n+              view.add([\r\n+                toolsExpand\r\n+              ], \"top-left\");\r\n+            // Add forest layer\r\n+            const forest = new MapImageLayer({\r\n+                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n+                title: 'Forest',\r\n+                sublayers: [{\r\n+                    id: 0,\r\n+                    visible: true,\r\n+                    opacity: 0.5,\r\n+                    listMode: 'hide'\r\n+                }],\r\n+                legendEnabled: true\r\n+            });\r\n+            webmap.add(forest);\r\n+\r\n+            // Add counties layer\r\n+            counties.current = new FeatureLayer({\r\n+                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Boundaries/MapServer/1',\r\n+                title: 'Counties',\r\n+                listMode: 'hide',\r\n+                highlightOptions: {\r\n+                    color: [0, 0, 0, 0],\r\n+                    haloOpacity: 0.9,\r\n+                    fillOpacity: 0.2,\r\n+                    listMode: 'hide'\r\n+                }\r\n+            });\r\n+\r\n+            // Add drought layer\r\n+            droughtLayer.current = new FeatureLayer({\r\n+                url: 'https://tfsgis-dfe02.tfs.tamu.edu/arcgis/rest/services/DroughtAnalysis/DroughtAnalysisAllData/MapServer/1',\r\n+                opacity: 0.7,\r\n+                definitionExpression: queryDate,\r\n+            });\r\n+            webmap.add(droughtLayer.current);\r\n+            webmap.add(counties.current);\r\n+\r\n+            // Add widgets\r\n+            const basemapGallery = new BasemapGallery({\r\n+                view: view.current,\r\n+                container: document.createElement('div')\r\n+            });\r\n+            const bgExpand = new Expand({\r\n+                view: view.current,\r\n+                content: basemapGallery.container,\r\n+                expandIconClass: 'esri-icon-basemap'\r\n+            });\r\n+\r\n+            // Draw tool \r\n+            const draw = new Draw({\r\n+                view: view.current\r\n+            });\r\n+            const drawTool = document.getElementById('draw');\r\n+            view.current.ui.add(drawTool, 'top-right');\r\n+            document.getElementById('draw-polygon').onclick = () => {\r\n+                DrawLine(draw, view.current, setSelectedCountyDraw);\r\n+            };\r\n+\r\n+            // Clear selection button\r\n+            document.getElementById('clear-selction').onclick = () => {\r\n+                view.current.graphics.removeAll();\r\n+                setSelectedCountyDraw([]);\r\n+                setSelectedCounty(null);\r\n+                if (highlightSelect.current) {\r\n+                    highlightSelect.current.remove();\r\n+                }\r\n+            };\r\n+\r\n+            // Forest button\r\n+            document.getElementById('forest').onclick = () => {\r\n+                forest.visible = !forest.visible;\r\n+                onForestToggle(forest.visible ? 'pctForestArea' : 'pctArea');\r\n+            };\r\n+\r\n+            //Report and printig button\r\n+\r\n+            const geoprocessor = 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/PrintUsingPro/GPServer/PrintUsingPro';\r\n+\r\n+            // Print button\r\n+            document.getElementById('print').onclick = async () => {\r\n+                try {\r\n+                    console.log('it is working');\r\n+                    const printParameters = {\r\n+                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n+                    };\r\n+                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n+                    await jobInfo.waitForJobCompletion();\r\n+                    const response = await jobInfo.fetchResultData('Output_File');\r\n+                    console.log(response.value.url);\r\n+                } catch (error) {\r\n+                    console.error('Print error:', error);\r\n+                }\r\n+            };\r\n+\r\n+            // Report button\r\n+            let pathname = window.location.href;\r\n+           // console.log(pathname);\r\n+            let pathnameProxy;\r\n+            let lastChar = pathname[pathname.length - 1];\r\n+            //pathnameProxy = pathname\r\n+            if (lastChar == \"/\") {\r\n+                pathnameProxy = pathname + 'ReportService';\r\n+                console.log(pathnameProxy);\r\n+            } else {\r\n+                pathnameProxy = pathname + '/ReportService';\r\n+                console.log(pathnameProxy);\r\n+            }\r\n+\r\n+            document.getElementById('report').onclick = async () => {\r\n+                try {\r\n+                    const printParameters = {\r\n+                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n+                    };\r\n+                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n+                    await jobInfo.waitForJobCompletion();\r\n+                    const response = await jobInfo.fetchResultData('Output_File');\r\n+                    console.log(response.value.url);\r\n+                    console.log(pathnameProxy);\r\n+                    const urlPic = response.value.url;\r\n+                    fetch(pathnameProxy, {\r\n+                        method: 'POST',\r\n+                        headers: {\r\n+                            'Content-Type': 'application/json',\r\n+                        },\r\n+                        body: JSON.stringify({ content: urlPic })\r\n+                    })\r\n+                        .then(response => {\r\n+                            console.log(response);\r\n+                        });\r\n+                } catch (error) {\r\n+                    console.error('Print error:', error);\r\n+                }\r\n+            };\r\n+\r\n+            view.current.ui.add(bgExpand, 'bottom-right');\r\n+        };\r\n+        initializeMap();\r\n+    }, []);\r\n+\r\n+    useEffect(() => {\r\n+        if (!counties.current) return;\r\n+        const query = counties.current.createQuery();\r\n+        query.where = `NAME = '${selectedCounty}'`;\r\n+        query.outFields = ['*'];\r\n+        query.returnGeometry = true;\r\n+        const fetchData = async () => {\r\n+            const featureLayerView = await view.current.whenLayerView(counties.current);\r\n+            if (highlightSelect.current) {\r\n+                highlightSelect.current.remove();\r\n+            }\r\n+            counties.current.queryFeatures(query).then((feat) => {\r\n+                view.current.goTo(feat.features);\r\n+                highlightSelect.current = featureLayerView.highlight(feat.features);\r\n+            });\r\n+        };\r\n+        fetchData();\r\n+    }, [selectedCounty]);\r\n+\r\n+    useEffect(() => {\r\n+        if (droughtLayer.current) {\r\n+            droughtLayer.current.definitionExpression = queryDate;\r\n+        }\r\n+    }, [queryDate]);\r\n+\r\n+    return (\r\n+        <div className=\"map-container\">\r\n+            <ButtonGroup\r\n+                size='sm'\r\n+                id=\"draw\"\r\n+                title=\"Draw polyline\"\r\n+                role=\"group\"\r\n+                aria-label=\"Basic example\"\r\n+                className=\"button-group-responsive\"\r\n+            >\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"draw-polygon\">\r\n+                    Draw<span className=\"esri-icon-polygon\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"clear-selction\">\r\n+                    Clear<span className=\"esri-icon-erase\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"report\">\r\n+                    Report<span className=\"esri-icon-printer\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"print\">\r\n+                    Print<span className=\"esri-icon-printer\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"forest\">\r\n+                    Forest<span className=\"esri-icon-layers\"></span>\r\n+                </Button>\r\n+            </ButtonGroup>\r\n+            <div className=\"mapDiv\" ref={mapDiv}></div>\r\n+        </div>\r\n+\r\n+    );\r\n+}\r\n+\r\n+MapComponent.propTypes = {\r\n+    selectedDate: PropTypes.instanceOf(Date),\r\n+    selectedCounty: PropTypes.string,\r\n+    queryDate: PropTypes.string.isRequired,\r\n+    onForestToggle: PropTypes.func.isRequired,\r\n+    setSelectedCountyDraw: PropTypes.func.isRequired,\r\n+    selectedCountyDraw: PropTypes.array,\r\n+    setSelectedCounty: PropTypes.func.isRequired\r\n+};\r\n+\r\n+export default MapComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726175631930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,9 @@\n                 expanded: true,\r\n                 group: \"top-left\",\r\n                 mode: \"floating\"\r\n               });\r\n-              view.add([\r\n-                toolsExpand\r\n-              ], \"top-left\");\r\n+              view.current.ui.add(toolsExpand, 'top-left');\r\n             // Add forest layer\r\n             const forest = new MapImageLayer({\r\n                 url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n                 title: 'Forest',\r\n"
                },
                {
                    "date": 1726175648369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,254 @@\n+import { useEffect, useRef, useState } from 'react';\r\n+import MapView from '@arcgis/core/views/MapView';\r\n+import Map from '@arcgis/core/Map';\r\n+import MapImageLayer from '@arcgis/core/layers/MapImageLayer';\r\n+import FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\n+import BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\n+import Expand from '@arcgis/core/widgets/Expand';\r\n+import Draw from '@arcgis/core/views/draw/Draw';\r\n+import { DrawLine } from './utils/Draw';\r\n+import PropTypes from 'prop-types';\r\n+import { GetWebMapAsJsonString } from './utils/MapAsJson';\r\n+import { submitJob } from '@arcgis/core/rest/geoprocessor';\r\n+import Button from 'react-bootstrap/Button';\r\n+import ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n+\r\n+function MapComponent({ selectedDate, selectedCounty, queryDate, onForestToggle, setSelectedCountyDraw, setSelectedCounty }) {\r\n+    const counties = useRef(null);\r\n+    const highlightSelect = useRef(null);\r\n+    const droughtLayer = useRef(null);\r\n+    const view = useRef(null);\r\n+    const mapDiv = useRef(null);\r\n+\r\n+    const [isExpanded, setIsExpanded] = useState(false);\r\n+    const toggleExpand = () => {\r\n+        setIsExpanded(!isExpanded);\r\n+    };\r\n+\r\n+    useEffect(() => {\r\n+        const initializeMap = async () => {\r\n+            const webmap = new Map({\r\n+                basemap: 'streets'\r\n+            });\r\n+\r\n+            view.current = new MapView({\r\n+                container: mapDiv.current,\r\n+                map: webmap,\r\n+                center: [-117.1490, 32.7353],\r\n+                scale: 10000000\r\n+            });\r\n+            const toolsExpand = new Expand({\r\n+                view,\r\n+                expandIconClass: \"esri-icon-filter\",\r\n+                content: document.getElementById(\"infoDiv\"),\r\n+                expanded: true,\r\n+                group: \"top-left\",\r\n+                mode: \"floating\"\r\n+              });\r\n+              view.current.ui.add(toolsExpand, 'top-left');\r\n+            // Add forest layer\r\n+            const forest = new MapImageLayer({\r\n+                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n+                title: 'Forest',\r\n+                sublayers: [{\r\n+                    id: 0,\r\n+                    visible: true,\r\n+                    opacity: 0.5,\r\n+                    listMode: 'hide'\r\n+                }],\r\n+                legendEnabled: true\r\n+            });\r\n+            webmap.add(forest);\r\n+\r\n+            // Add counties layer\r\n+            counties.current = new FeatureLayer({\r\n+                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Boundaries/MapServer/1',\r\n+                title: 'Counties',\r\n+                listMode: 'hide',\r\n+                highlightOptions: {\r\n+                    color: [0, 0, 0, 0],\r\n+                    haloOpacity: 0.9,\r\n+                    fillOpacity: 0.2,\r\n+                    listMode: 'hide'\r\n+                }\r\n+            });\r\n+\r\n+            // Add drought layer\r\n+            droughtLayer.current = new FeatureLayer({\r\n+                url: 'https://tfsgis-dfe02.tfs.tamu.edu/arcgis/rest/services/DroughtAnalysis/DroughtAnalysisAllData/MapServer/1',\r\n+                opacity: 0.7,\r\n+                definitionExpression: queryDate,\r\n+            });\r\n+            webmap.add(droughtLayer.current);\r\n+            webmap.add(counties.current);\r\n+\r\n+            // Add widgets\r\n+            const basemapGallery = new BasemapGallery({\r\n+                view: view.current,\r\n+                container: document.createElement('div')\r\n+            });\r\n+            const bgExpand = new Expand({\r\n+                view: view.current,\r\n+                content: basemapGallery.container,\r\n+                expandIconClass: 'esri-icon-basemap'\r\n+            });\r\n+\r\n+            // Draw tool \r\n+            const draw = new Draw({\r\n+                view: view.current\r\n+            });\r\n+            const drawTool = document.getElementById('draw');\r\n+            view.current.ui.add(drawTool, 'top-right');\r\n+            document.getElementById('draw-polygon').onclick = () => {\r\n+                DrawLine(draw, view.current, setSelectedCountyDraw);\r\n+            };\r\n+\r\n+            // Clear selection button\r\n+            document.getElementById('clear-selction').onclick = () => {\r\n+                view.current.graphics.removeAll();\r\n+                setSelectedCountyDraw([]);\r\n+                setSelectedCounty(null);\r\n+                if (highlightSelect.current) {\r\n+                    highlightSelect.current.remove();\r\n+                }\r\n+            };\r\n+\r\n+            // Forest button\r\n+            document.getElementById('forest').onclick = () => {\r\n+                forest.visible = !forest.visible;\r\n+                onForestToggle(forest.visible ? 'pctForestArea' : 'pctArea');\r\n+            };\r\n+\r\n+            //Report and printig button\r\n+\r\n+            const geoprocessor = 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/PrintUsingPro/GPServer/PrintUsingPro';\r\n+\r\n+            // Print button\r\n+            document.getElementById('print').onclick = async () => {\r\n+                try {\r\n+                    console.log('it is working');\r\n+                    const printParameters = {\r\n+                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n+                    };\r\n+                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n+                    await jobInfo.waitForJobCompletion();\r\n+                    const response = await jobInfo.fetchResultData('Output_File');\r\n+                    console.log(response.value.url);\r\n+                } catch (error) {\r\n+                    console.error('Print error:', error);\r\n+                }\r\n+            };\r\n+\r\n+            // Report button\r\n+            let pathname = window.location.href;\r\n+           // console.log(pathname);\r\n+            let pathnameProxy;\r\n+            let lastChar = pathname[pathname.length - 1];\r\n+            //pathnameProxy = pathname\r\n+            if (lastChar == \"/\") {\r\n+                pathnameProxy = pathname + 'ReportService';\r\n+                console.log(pathnameProxy);\r\n+            } else {\r\n+                pathnameProxy = pathname + '/ReportService';\r\n+                console.log(pathnameProxy);\r\n+            }\r\n+\r\n+            document.getElementById('report').onclick = async () => {\r\n+                try {\r\n+                    const printParameters = {\r\n+                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n+                    };\r\n+                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n+                    await jobInfo.waitForJobCompletion();\r\n+                    const response = await jobInfo.fetchResultData('Output_File');\r\n+                    console.log(response.value.url);\r\n+                    console.log(pathnameProxy);\r\n+                    const urlPic = response.value.url;\r\n+                    fetch(pathnameProxy, {\r\n+                        method: 'POST',\r\n+                        headers: {\r\n+                            'Content-Type': 'application/json',\r\n+                        },\r\n+                        body: JSON.stringify({ content: urlPic })\r\n+                    })\r\n+                        .then(response => {\r\n+                            console.log(response);\r\n+                        });\r\n+                } catch (error) {\r\n+                    console.error('Print error:', error);\r\n+                }\r\n+            };\r\n+\r\n+            view.current.ui.add(bgExpand, 'bottom-right');\r\n+        };\r\n+        initializeMap();\r\n+    }, []);\r\n+\r\n+    useEffect(() => {\r\n+        if (!counties.current) return;\r\n+        const query = counties.current.createQuery();\r\n+        query.where = `NAME = '${selectedCounty}'`;\r\n+        query.outFields = ['*'];\r\n+        query.returnGeometry = true;\r\n+        const fetchData = async () => {\r\n+            const featureLayerView = await view.current.whenLayerView(counties.current);\r\n+            if (highlightSelect.current) {\r\n+                highlightSelect.current.remove();\r\n+            }\r\n+            counties.current.queryFeatures(query).then((feat) => {\r\n+                view.current.goTo(feat.features);\r\n+                highlightSelect.current = featureLayerView.highlight(feat.features);\r\n+            });\r\n+        };\r\n+        fetchData();\r\n+    }, [selectedCounty]);\r\n+\r\n+    useEffect(() => {\r\n+        if (droughtLayer.current) {\r\n+            droughtLayer.current.definitionExpression = queryDate;\r\n+        }\r\n+    }, [queryDate]);\r\n+\r\n+    return (\r\n+        <div className=\"map-container\">\r\n+            <ButtonGroup\r\n+                size='sm'\r\n+                id=\"draw\"\r\n+                title=\"Draw polyline\"\r\n+                role=\"group\"\r\n+                aria-label=\"Basic example\"\r\n+                className=\"button-group-responsive\"\r\n+            >\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"draw-polygon\">\r\n+                    Draw<span className=\"esri-icon-polygon\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"clear-selction\">\r\n+                    Clear<span className=\"esri-icon-erase\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"report\">\r\n+                    Report<span className=\"esri-icon-printer\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"print\">\r\n+                    Print<span className=\"esri-icon-printer\"></span>\r\n+                </Button>\r\n+                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"forest\">\r\n+                    Forest<span className=\"esri-icon-layers\"></span>\r\n+                </Button>\r\n+            </ButtonGroup>\r\n+            <div className=\"mapDiv\" ref={mapDiv}></div>\r\n+        </div>\r\n+\r\n+    );\r\n+}\r\n+\r\n+MapComponent.propTypes = {\r\n+    selectedDate: PropTypes.instanceOf(Date),\r\n+    selectedCounty: PropTypes.string,\r\n+    queryDate: PropTypes.string.isRequired,\r\n+    onForestToggle: PropTypes.func.isRequired,\r\n+    setSelectedCountyDraw: PropTypes.func.isRequired,\r\n+    selectedCountyDraw: PropTypes.array,\r\n+    setSelectedCounty: PropTypes.func.isRequired\r\n+};\r\n+\r\n+export default MapComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726175688729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,17 +36,9 @@\n                 map: webmap,\r\n                 center: [-117.1490, 32.7353],\r\n                 scale: 10000000\r\n             });\r\n-            const toolsExpand = new Expand({\r\n-                view,\r\n-                expandIconClass: \"esri-icon-filter\",\r\n-                content: document.getElementById(\"infoDiv\"),\r\n-                expanded: true,\r\n-                group: \"top-left\",\r\n-                mode: \"floating\"\r\n-              });\r\n-              view.current.ui.add(toolsExpand, 'top-left');\r\n+    \r\n             // Add forest layer\r\n             const forest = new MapImageLayer({\r\n                 url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n                 title: 'Forest',\r\n@@ -98,8 +90,17 @@\n                 view: view.current\r\n             });\r\n             const drawTool = document.getElementById('draw');\r\n             view.current.ui.add(drawTool, 'top-right');\r\n+            const toolsExpand = new Expand({\r\n+                view,\r\n+                expandIconClass: \"esri-icon-filter\",\r\n+                content: document.getElementById(\"infoDiv\"),\r\n+                expanded: true,\r\n+                group: \"top-left\",\r\n+                mode: \"floating\"\r\n+              });\r\n+              view.current.ui.add(toolsExpand, 'top-left');\r\n             document.getElementById('draw-polygon').onclick = () => {\r\n                 DrawLine(draw, view.current, setSelectedCountyDraw);\r\n             };\r\n \r\n"
                },
                {
                    "date": 1726175730466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n             });\r\n             const drawTool = document.getElementById('draw');\r\n             view.current.ui.add(drawTool, 'top-right');\r\n             const toolsExpand = new Expand({\r\n-                view,\r\n+                view: view.current,\r\n                 expandIconClass: \"esri-icon-filter\",\r\n                 content: document.getElementById(\"infoDiv\"),\r\n                 expanded: true,\r\n                 group: \"top-left\",\r\n@@ -251,515 +251,5 @@\n     selectedCountyDraw: PropTypes.array,\r\n     setSelectedCounty: PropTypes.func.isRequired\r\n };\r\n \r\n-export default MapComponent;\n-import { useEffect, useRef, useState } from 'react';\r\n-import MapView from '@arcgis/core/views/MapView';\r\n-import Map from '@arcgis/core/Map';\r\n-import MapImageLayer from '@arcgis/core/layers/MapImageLayer';\r\n-import FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\n-import BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\n-import Expand from '@arcgis/core/widgets/Expand';\r\n-import Draw from '@arcgis/core/views/draw/Draw';\r\n-import { DrawLine } from './utils/Draw';\r\n-import PropTypes from 'prop-types';\r\n-import { GetWebMapAsJsonString } from './utils/MapAsJson';\r\n-import { submitJob } from '@arcgis/core/rest/geoprocessor';\r\n-import Button from 'react-bootstrap/Button';\r\n-import ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n-\r\n-function MapComponent({ selectedDate, selectedCounty, queryDate, onForestToggle, setSelectedCountyDraw, setSelectedCounty }) {\r\n-    const counties = useRef(null);\r\n-    const highlightSelect = useRef(null);\r\n-    const droughtLayer = useRef(null);\r\n-    const view = useRef(null);\r\n-    const mapDiv = useRef(null);\r\n-\r\n-    const [isExpanded, setIsExpanded] = useState(false);\r\n-    const toggleExpand = () => {\r\n-        setIsExpanded(!isExpanded);\r\n-    };\r\n-\r\n-    useEffect(() => {\r\n-        const initializeMap = async () => {\r\n-            const webmap = new Map({\r\n-                basemap: 'streets'\r\n-            });\r\n-\r\n-            view.current = new MapView({\r\n-                container: mapDiv.current,\r\n-                map: webmap,\r\n-                center: [-117.1490, 32.7353],\r\n-                scale: 10000000\r\n-            });\r\n-            const toolsExpand = new Expand({\r\n-                view,\r\n-                expandIconClass: \"esri-icon-filter\",\r\n-                content: document.getElementById(\"infoDiv\"),\r\n-                expanded: true,\r\n-                group: \"top-left\",\r\n-                mode: \"floating\"\r\n-              });\r\n-              view.current.ui.add(toolsExpand, 'top-left');\r\n-            // Add forest layer\r\n-            const forest = new MapImageLayer({\r\n-                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n-                title: 'Forest',\r\n-                sublayers: [{\r\n-                    id: 0,\r\n-                    visible: true,\r\n-                    opacity: 0.5,\r\n-                    listMode: 'hide'\r\n-                }],\r\n-                legendEnabled: true\r\n-            });\r\n-            webmap.add(forest);\r\n-\r\n-            // Add counties layer\r\n-            counties.current = new FeatureLayer({\r\n-                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Boundaries/MapServer/1',\r\n-                title: 'Counties',\r\n-                listMode: 'hide',\r\n-                highlightOptions: {\r\n-                    color: [0, 0, 0, 0],\r\n-                    haloOpacity: 0.9,\r\n-                    fillOpacity: 0.2,\r\n-                    listMode: 'hide'\r\n-                }\r\n-            });\r\n-\r\n-            // Add drought layer\r\n-            droughtLayer.current = new FeatureLayer({\r\n-                url: 'https://tfsgis-dfe02.tfs.tamu.edu/arcgis/rest/services/DroughtAnalysis/DroughtAnalysisAllData/MapServer/1',\r\n-                opacity: 0.7,\r\n-                definitionExpression: queryDate,\r\n-            });\r\n-            webmap.add(droughtLayer.current);\r\n-            webmap.add(counties.current);\r\n-\r\n-            // Add widgets\r\n-            const basemapGallery = new BasemapGallery({\r\n-                view: view.current,\r\n-                container: document.createElement('div')\r\n-            });\r\n-            const bgExpand = new Expand({\r\n-                view: view.current,\r\n-                content: basemapGallery.container,\r\n-                expandIconClass: 'esri-icon-basemap'\r\n-            });\r\n-\r\n-            // Draw tool \r\n-            const draw = new Draw({\r\n-                view: view.current\r\n-            });\r\n-            const drawTool = document.getElementById('draw');\r\n-            view.current.ui.add(drawTool, 'top-right');\r\n-            document.getElementById('draw-polygon').onclick = () => {\r\n-                DrawLine(draw, view.current, setSelectedCountyDraw);\r\n-            };\r\n-\r\n-            // Clear selection button\r\n-            document.getElementById('clear-selction').onclick = () => {\r\n-                view.current.graphics.removeAll();\r\n-                setSelectedCountyDraw([]);\r\n-                setSelectedCounty(null);\r\n-                if (highlightSelect.current) {\r\n-                    highlightSelect.current.remove();\r\n-                }\r\n-            };\r\n-\r\n-            // Forest button\r\n-            document.getElementById('forest').onclick = () => {\r\n-                forest.visible = !forest.visible;\r\n-                onForestToggle(forest.visible ? 'pctForestArea' : 'pctArea');\r\n-            };\r\n-\r\n-            //Report and printig button\r\n-\r\n-            const geoprocessor = 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/PrintUsingPro/GPServer/PrintUsingPro';\r\n-\r\n-            // Print button\r\n-            document.getElementById('print').onclick = async () => {\r\n-                try {\r\n-                    console.log('it is working');\r\n-                    const printParameters = {\r\n-                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n-                    };\r\n-                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n-                    await jobInfo.waitForJobCompletion();\r\n-                    const response = await jobInfo.fetchResultData('Output_File');\r\n-                    console.log(response.value.url);\r\n-                } catch (error) {\r\n-                    console.error('Print error:', error);\r\n-                }\r\n-            };\r\n-\r\n-            // Report button\r\n-            let pathname = window.location.href;\r\n-           // console.log(pathname);\r\n-            let pathnameProxy;\r\n-            let lastChar = pathname[pathname.length - 1];\r\n-            //pathnameProxy = pathname\r\n-            if (lastChar == \"/\") {\r\n-                pathnameProxy = pathname + 'ReportService';\r\n-                console.log(pathnameProxy);\r\n-            } else {\r\n-                pathnameProxy = pathname + '/ReportService';\r\n-                console.log(pathnameProxy);\r\n-            }\r\n-\r\n-            document.getElementById('report').onclick = async () => {\r\n-                try {\r\n-                    const printParameters = {\r\n-                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n-                    };\r\n-                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n-                    await jobInfo.waitForJobCompletion();\r\n-                    const response = await jobInfo.fetchResultData('Output_File');\r\n-                    console.log(response.value.url);\r\n-                    console.log(pathnameProxy);\r\n-                    const urlPic = response.value.url;\r\n-                    fetch(pathnameProxy, {\r\n-                        method: 'POST',\r\n-                        headers: {\r\n-                            'Content-Type': 'application/json',\r\n-                        },\r\n-                        body: JSON.stringify({ content: urlPic })\r\n-                    })\r\n-                        .then(response => {\r\n-                            console.log(response);\r\n-                        });\r\n-                } catch (error) {\r\n-                    console.error('Print error:', error);\r\n-                }\r\n-            };\r\n-\r\n-            view.current.ui.add(bgExpand, 'bottom-right');\r\n-        };\r\n-        initializeMap();\r\n-    }, []);\r\n-\r\n-    useEffect(() => {\r\n-        if (!counties.current) return;\r\n-        const query = counties.current.createQuery();\r\n-        query.where = `NAME = '${selectedCounty}'`;\r\n-        query.outFields = ['*'];\r\n-        query.returnGeometry = true;\r\n-        const fetchData = async () => {\r\n-            const featureLayerView = await view.current.whenLayerView(counties.current);\r\n-            if (highlightSelect.current) {\r\n-                highlightSelect.current.remove();\r\n-            }\r\n-            counties.current.queryFeatures(query).then((feat) => {\r\n-                view.current.goTo(feat.features);\r\n-                highlightSelect.current = featureLayerView.highlight(feat.features);\r\n-            });\r\n-        };\r\n-        fetchData();\r\n-    }, [selectedCounty]);\r\n-\r\n-    useEffect(() => {\r\n-        if (droughtLayer.current) {\r\n-            droughtLayer.current.definitionExpression = queryDate;\r\n-        }\r\n-    }, [queryDate]);\r\n-\r\n-    return (\r\n-        <div className=\"map-container\">\r\n-            <ButtonGroup\r\n-                size='sm'\r\n-                id=\"draw\"\r\n-                title=\"Draw polyline\"\r\n-                role=\"group\"\r\n-                aria-label=\"Basic example\"\r\n-                className=\"button-group-responsive\"\r\n-            >\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"draw-polygon\">\r\n-                    Draw<span className=\"esri-icon-polygon\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"clear-selction\">\r\n-                    Clear<span className=\"esri-icon-erase\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"report\">\r\n-                    Report<span className=\"esri-icon-printer\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"print\">\r\n-                    Print<span className=\"esri-icon-printer\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"forest\">\r\n-                    Forest<span className=\"esri-icon-layers\"></span>\r\n-                </Button>\r\n-            </ButtonGroup>\r\n-            <div className=\"mapDiv\" ref={mapDiv}></div>\r\n-        </div>\r\n-\r\n-    );\r\n-}\r\n-\r\n-MapComponent.propTypes = {\r\n-    selectedDate: PropTypes.instanceOf(Date),\r\n-    selectedCounty: PropTypes.string,\r\n-    queryDate: PropTypes.string.isRequired,\r\n-    onForestToggle: PropTypes.func.isRequired,\r\n-    setSelectedCountyDraw: PropTypes.func.isRequired,\r\n-    selectedCountyDraw: PropTypes.array,\r\n-    setSelectedCounty: PropTypes.func.isRequired\r\n-};\r\n-\r\n-export default MapComponent;\n-import { useEffect, useRef, useState } from 'react';\r\n-import MapView from '@arcgis/core/views/MapView';\r\n-import Map from '@arcgis/core/Map';\r\n-import MapImageLayer from '@arcgis/core/layers/MapImageLayer';\r\n-import FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\n-import BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\n-import Expand from '@arcgis/core/widgets/Expand';\r\n-import Draw from '@arcgis/core/views/draw/Draw';\r\n-import { DrawLine } from './utils/Draw';\r\n-import PropTypes from 'prop-types';\r\n-import { GetWebMapAsJsonString } from './utils/MapAsJson';\r\n-import { submitJob } from '@arcgis/core/rest/geoprocessor';\r\n-import Button from 'react-bootstrap/Button';\r\n-import ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n-\r\n-function MapComponent({ selectedDate, selectedCounty, queryDate, onForestToggle, setSelectedCountyDraw, setSelectedCounty }) {\r\n-    const counties = useRef(null);\r\n-    const highlightSelect = useRef(null);\r\n-    const droughtLayer = useRef(null);\r\n-    const view = useRef(null);\r\n-    const mapDiv = useRef(null);\r\n-\r\n-    const [isExpanded, setIsExpanded] = useState(false);\r\n-    const toggleExpand = () => {\r\n-        setIsExpanded(!isExpanded);\r\n-    };\r\n-\r\n-    useEffect(() => {\r\n-        const initializeMap = async () => {\r\n-            const webmap = new Map({\r\n-                basemap: 'streets'\r\n-            });\r\n-\r\n-            view.current = new MapView({\r\n-                container: mapDiv.current,\r\n-                map: webmap,\r\n-                center: [-117.1490, 32.7353],\r\n-                scale: 10000000\r\n-            });\r\n-            const toolsExpand = new Expand({\r\n-                view,\r\n-                expandIconClass: \"esri-icon-filter\",\r\n-                content: document.getElementById(\"infoDiv\"),\r\n-                expanded: true,\r\n-                group: \"top-left\",\r\n-                mode: \"floating\"\r\n-              });\r\n-              view.ui.add([\r\n-                toolsExpand\r\n-              ], \"top-left\");\r\n-            // Add forest layer\r\n-            const forest = new MapImageLayer({\r\n-                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n-                title: 'Forest',\r\n-                sublayers: [{\r\n-                    id: 0,\r\n-                    visible: true,\r\n-                    opacity: 0.5,\r\n-                    listMode: 'hide'\r\n-                }],\r\n-                legendEnabled: true\r\n-            });\r\n-            webmap.add(forest);\r\n-\r\n-            // Add counties layer\r\n-            counties.current = new FeatureLayer({\r\n-                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Boundaries/MapServer/1',\r\n-                title: 'Counties',\r\n-                listMode: 'hide',\r\n-                highlightOptions: {\r\n-                    color: [0, 0, 0, 0],\r\n-                    haloOpacity: 0.9,\r\n-                    fillOpacity: 0.2,\r\n-                    listMode: 'hide'\r\n-                }\r\n-            });\r\n-\r\n-            // Add drought layer\r\n-            droughtLayer.current = new FeatureLayer({\r\n-                url: 'https://tfsgis-dfe02.tfs.tamu.edu/arcgis/rest/services/DroughtAnalysis/DroughtAnalysisAllData/MapServer/1',\r\n-                opacity: 0.7,\r\n-                definitionExpression: queryDate,\r\n-            });\r\n-            webmap.add(droughtLayer.current);\r\n-            webmap.add(counties.current);\r\n-\r\n-            // Add widgets\r\n-            const basemapGallery = new BasemapGallery({\r\n-                view: view.current,\r\n-                container: document.createElement('div')\r\n-            });\r\n-            const bgExpand = new Expand({\r\n-                view: view.current,\r\n-                content: basemapGallery.container,\r\n-                expandIconClass: 'esri-icon-basemap'\r\n-            });\r\n-\r\n-            // Draw tool \r\n-            const draw = new Draw({\r\n-                view: view.current\r\n-            });\r\n-            const drawTool = document.getElementById('draw');\r\n-            view.current.ui.add(drawTool, 'top-right');\r\n-            document.getElementById('draw-polygon').onclick = () => {\r\n-                DrawLine(draw, view.current, setSelectedCountyDraw);\r\n-            };\r\n-\r\n-            // Clear selection button\r\n-            document.getElementById('clear-selction').onclick = () => {\r\n-                view.current.graphics.removeAll();\r\n-                setSelectedCountyDraw([]);\r\n-                setSelectedCounty(null);\r\n-                if (highlightSelect.current) {\r\n-                    highlightSelect.current.remove();\r\n-                }\r\n-            };\r\n-\r\n-            // Forest button\r\n-            document.getElementById('forest').onclick = () => {\r\n-                forest.visible = !forest.visible;\r\n-                onForestToggle(forest.visible ? 'pctForestArea' : 'pctArea');\r\n-            };\r\n-\r\n-            //Report and printig button\r\n-\r\n-            const geoprocessor = 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/PrintUsingPro/GPServer/PrintUsingPro';\r\n-\r\n-            // Print button\r\n-            document.getElementById('print').onclick = async () => {\r\n-                try {\r\n-                    console.log('it is working');\r\n-                    const printParameters = {\r\n-                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n-                    };\r\n-                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n-                    await jobInfo.waitForJobCompletion();\r\n-                    const response = await jobInfo.fetchResultData('Output_File');\r\n-                    console.log(response.value.url);\r\n-                } catch (error) {\r\n-                    console.error('Print error:', error);\r\n-                }\r\n-            };\r\n-\r\n-            // Report button\r\n-            let pathname = window.location.href;\r\n-           // console.log(pathname);\r\n-            let pathnameProxy;\r\n-            let lastChar = pathname[pathname.length - 1];\r\n-            //pathnameProxy = pathname\r\n-            if (lastChar == \"/\") {\r\n-                pathnameProxy = pathname + 'ReportService';\r\n-                console.log(pathnameProxy);\r\n-            } else {\r\n-                pathnameProxy = pathname + '/ReportService';\r\n-                console.log(pathnameProxy);\r\n-            }\r\n-\r\n-            document.getElementById('report').onclick = async () => {\r\n-                try {\r\n-                    const printParameters = {\r\n-                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n-                    };\r\n-                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n-                    await jobInfo.waitForJobCompletion();\r\n-                    const response = await jobInfo.fetchResultData('Output_File');\r\n-                    console.log(response.value.url);\r\n-                    console.log(pathnameProxy);\r\n-                    const urlPic = response.value.url;\r\n-                    fetch(pathnameProxy, {\r\n-                        method: 'POST',\r\n-                        headers: {\r\n-                            'Content-Type': 'application/json',\r\n-                        },\r\n-                        body: JSON.stringify({ content: urlPic })\r\n-                    })\r\n-                        .then(response => {\r\n-                            console.log(response);\r\n-                        });\r\n-                } catch (error) {\r\n-                    console.error('Print error:', error);\r\n-                }\r\n-            };\r\n-\r\n-            view.current.ui.add(bgExpand, 'bottom-right');\r\n-        };\r\n-        initializeMap();\r\n-    }, []);\r\n-\r\n-    useEffect(() => {\r\n-        if (!counties.current) return;\r\n-        const query = counties.current.createQuery();\r\n-        query.where = `NAME = '${selectedCounty}'`;\r\n-        query.outFields = ['*'];\r\n-        query.returnGeometry = true;\r\n-        const fetchData = async () => {\r\n-            const featureLayerView = await view.current.whenLayerView(counties.current);\r\n-            if (highlightSelect.current) {\r\n-                highlightSelect.current.remove();\r\n-            }\r\n-            counties.current.queryFeatures(query).then((feat) => {\r\n-                view.current.goTo(feat.features);\r\n-                highlightSelect.current = featureLayerView.highlight(feat.features);\r\n-            });\r\n-        };\r\n-        fetchData();\r\n-    }, [selectedCounty]);\r\n-\r\n-    useEffect(() => {\r\n-        if (droughtLayer.current) {\r\n-            droughtLayer.current.definitionExpression = queryDate;\r\n-        }\r\n-    }, [queryDate]);\r\n-\r\n-    return (\r\n-        <div className=\"map-container\">\r\n-            <ButtonGroup\r\n-                size='sm'\r\n-                id=\"draw\"\r\n-                title=\"Draw polyline\"\r\n-                role=\"group\"\r\n-                aria-label=\"Basic example\"\r\n-                className=\"button-group-responsive\"\r\n-            >\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"draw-polygon\">\r\n-                    Draw<span className=\"esri-icon-polygon\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"clear-selction\">\r\n-                    Clear<span className=\"esri-icon-erase\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"report\">\r\n-                    Report<span className=\"esri-icon-printer\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"print\">\r\n-                    Print<span className=\"esri-icon-printer\"></span>\r\n-                </Button>\r\n-                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"forest\">\r\n-                    Forest<span className=\"esri-icon-layers\"></span>\r\n-                </Button>\r\n-            </ButtonGroup>\r\n-            <div className=\"mapDiv\" ref={mapDiv}></div>\r\n-        </div>\r\n-\r\n-    );\r\n-}\r\n-\r\n-MapComponent.propTypes = {\r\n-    selectedDate: PropTypes.instanceOf(Date),\r\n-    selectedCounty: PropTypes.string,\r\n-    queryDate: PropTypes.string.isRequired,\r\n-    onForestToggle: PropTypes.func.isRequired,\r\n-    setSelectedCountyDraw: PropTypes.func.isRequired,\r\n-    selectedCountyDraw: PropTypes.array,\r\n-    setSelectedCounty: PropTypes.func.isRequired\r\n-};\r\n-\r\n export default MapComponent;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1726175170624,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from 'react';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapImageLayer from '@arcgis/core/layers/MapImageLayer';\r\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\nimport BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport Draw from '@arcgis/core/views/draw/Draw';\r\nimport { DrawLine } from './utils/Draw';\r\nimport PropTypes from 'prop-types';\r\nimport { GetWebMapAsJsonString } from './utils/MapAsJson';\r\nimport { submitJob } from '@arcgis/core/rest/geoprocessor';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Expand from \"@arcgis/core/widgets/Expand\";\r\nfunction MapComponent({ selectedDate, selectedCounty, queryDate, onForestToggle, setSelectedCountyDraw, setSelectedCounty }) {\r\n    const counties = useRef(null);\r\n    const highlightSelect = useRef(null);\r\n    const droughtLayer = useRef(null);\r\n    const view = useRef(null);\r\n    const mapDiv = useRef(null);\r\n\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n    const toggleExpand = () => {\r\n        setIsExpanded(!isExpanded);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const initializeMap = async () => {\r\n            const webmap = new Map({\r\n                basemap: 'streets'\r\n            });\r\n\r\n            view.current = new MapView({\r\n                container: mapDiv.current,\r\n                map: webmap,\r\n                center: [-117.1490, 32.7353],\r\n                scale: 10000000\r\n            });\r\n            const toolsExpand = new Expand({\r\n                view,\r\n                expandIconClass: \"esri-icon-filter\",\r\n                content: document.getElementById(\"infoDiv\"),\r\n                expanded: true,\r\n                group: \"top-left\",\r\n                mode: \"floating\"\r\n              });\r\n            // Add forest layer\r\n            const forest = new MapImageLayer({\r\n                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Forest2015/MapServer',\r\n                title: 'Forest',\r\n                sublayers: [{\r\n                    id: 0,\r\n                    visible: true,\r\n                    opacity: 0.5,\r\n                    listMode: 'hide'\r\n                }],\r\n                legendEnabled: true\r\n            });\r\n            webmap.add(forest);\r\n\r\n            // Add counties layer\r\n            counties.current = new FeatureLayer({\r\n                url: 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/Boundaries/MapServer/1',\r\n                title: 'Counties',\r\n                listMode: 'hide',\r\n                highlightOptions: {\r\n                    color: [0, 0, 0, 0],\r\n                    haloOpacity: 0.9,\r\n                    fillOpacity: 0.2,\r\n                    listMode: 'hide'\r\n                }\r\n            });\r\n\r\n            // Add drought layer\r\n            droughtLayer.current = new FeatureLayer({\r\n                url: 'https://tfsgis-dfe02.tfs.tamu.edu/arcgis/rest/services/DroughtAnalysis/DroughtAnalysisAllData/MapServer/1',\r\n                opacity: 0.7,\r\n                definitionExpression: queryDate,\r\n            });\r\n            webmap.add(droughtLayer.current);\r\n            webmap.add(counties.current);\r\n\r\n            // Add widgets\r\n            const basemapGallery = new BasemapGallery({\r\n                view: view.current,\r\n                container: document.createElement('div')\r\n            });\r\n            const bgExpand = new Expand({\r\n                view: view.current,\r\n                content: basemapGallery.container,\r\n                expandIconClass: 'esri-icon-basemap'\r\n            });\r\n\r\n            // Draw tool \r\n            const draw = new Draw({\r\n                view: view.current\r\n            });\r\n            const drawTool = document.getElementById('draw');\r\n            view.current.ui.add(drawTool, 'top-right');\r\n            document.getElementById('draw-polygon').onclick = () => {\r\n                DrawLine(draw, view.current, setSelectedCountyDraw);\r\n            };\r\n\r\n            // Clear selection button\r\n            document.getElementById('clear-selction').onclick = () => {\r\n                view.current.graphics.removeAll();\r\n                setSelectedCountyDraw([]);\r\n                setSelectedCounty(null);\r\n                if (highlightSelect.current) {\r\n                    highlightSelect.current.remove();\r\n                }\r\n            };\r\n\r\n            // Forest button\r\n            document.getElementById('forest').onclick = () => {\r\n                forest.visible = !forest.visible;\r\n                onForestToggle(forest.visible ? 'pctForestArea' : 'pctArea');\r\n            };\r\n\r\n            //Report and printig button\r\n\r\n            const geoprocessor = 'https://tfsgis02.tfs.tamu.edu/arcgis/rest/services/Shared/PrintUsingPro/GPServer/PrintUsingPro';\r\n\r\n            // Print button\r\n            document.getElementById('print').onclick = async () => {\r\n                try {\r\n                    console.log('it is working');\r\n                    const printParameters = {\r\n                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n                    };\r\n                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n                    await jobInfo.waitForJobCompletion();\r\n                    const response = await jobInfo.fetchResultData('Output_File');\r\n                    console.log(response.value.url);\r\n                } catch (error) {\r\n                    console.error('Print error:', error);\r\n                }\r\n            };\r\n\r\n            // Report button\r\n            let pathname = window.location.href;\r\n           // console.log(pathname);\r\n            let pathnameProxy;\r\n            let lastChar = pathname[pathname.length - 1];\r\n            //pathnameProxy = pathname\r\n            if (lastChar == \"/\") {\r\n                pathnameProxy = pathname + 'ReportService';\r\n                console.log(pathnameProxy);\r\n            } else {\r\n                pathnameProxy = pathname + '/ReportService';\r\n                console.log(pathnameProxy);\r\n            }\r\n\r\n            document.getElementById('report').onclick = async () => {\r\n                try {\r\n                    const printParameters = {\r\n                        Web_Map_as_JSON: GetWebMapAsJsonString(view.current)\r\n                    };\r\n                    const jobInfo = await submitJob(geoprocessor, printParameters);\r\n                    await jobInfo.waitForJobCompletion();\r\n                    const response = await jobInfo.fetchResultData('Output_File');\r\n                    console.log(response.value.url);\r\n                    console.log(pathnameProxy);\r\n                    const urlPic = response.value.url;\r\n                    fetch(pathnameProxy, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({ content: urlPic })\r\n                    })\r\n                        .then(response => {\r\n                            console.log(response);\r\n                        });\r\n                } catch (error) {\r\n                    console.error('Print error:', error);\r\n                }\r\n            };\r\n\r\n            view.current.ui.add(bgExpand, 'bottom-right');\r\n        };\r\n        initializeMap();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!counties.current) return;\r\n        const query = counties.current.createQuery();\r\n        query.where = `NAME = '${selectedCounty}'`;\r\n        query.outFields = ['*'];\r\n        query.returnGeometry = true;\r\n        const fetchData = async () => {\r\n            const featureLayerView = await view.current.whenLayerView(counties.current);\r\n            if (highlightSelect.current) {\r\n                highlightSelect.current.remove();\r\n            }\r\n            counties.current.queryFeatures(query).then((feat) => {\r\n                view.current.goTo(feat.features);\r\n                highlightSelect.current = featureLayerView.highlight(feat.features);\r\n            });\r\n        };\r\n        fetchData();\r\n    }, [selectedCounty]);\r\n\r\n    useEffect(() => {\r\n        if (droughtLayer.current) {\r\n            droughtLayer.current.definitionExpression = queryDate;\r\n        }\r\n    }, [queryDate]);\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <ButtonGroup\r\n                size='sm'\r\n                id=\"draw\"\r\n                title=\"Draw polyline\"\r\n                role=\"group\"\r\n                aria-label=\"Basic example\"\r\n                className=\"button-group-responsive\"\r\n            >\r\n                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"draw-polygon\">\r\n                    Draw<span className=\"esri-icon-polygon\"></span>\r\n                </Button>\r\n                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"clear-selction\">\r\n                    Clear<span className=\"esri-icon-erase\"></span>\r\n                </Button>\r\n                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"report\">\r\n                    Report<span className=\"esri-icon-printer\"></span>\r\n                </Button>\r\n                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"print\">\r\n                    Print<span className=\"esri-icon-printer\"></span>\r\n                </Button>\r\n                <Button variant=\"secondary\" className=\"esri-widget tool\" id=\"forest\">\r\n                    Forest<span className=\"esri-icon-layers\"></span>\r\n                </Button>\r\n            </ButtonGroup>\r\n            <div className=\"mapDiv\" ref={mapDiv}></div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nMapComponent.propTypes = {\r\n    selectedDate: PropTypes.instanceOf(Date),\r\n    selectedCounty: PropTypes.string,\r\n    queryDate: PropTypes.string.isRequired,\r\n    onForestToggle: PropTypes.func.isRequired,\r\n    setSelectedCountyDraw: PropTypes.func.isRequired,\r\n    selectedCountyDraw: PropTypes.array,\r\n    setSelectedCounty: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MapComponent;"
        }
    ]
}